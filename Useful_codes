long long nCrModp_2(long long n,long long r, long long p)  
{ 
    if(r > n)   {
        return 0;
    }
    if(n < 0 || r < 0)  {
        return 0;
    }
    if (r==0) 
      return 1;
    long long fac[n+1]; 
    fac[0] = 1; 
    for (int i=1 ; i<=n; i++) 
        fac[i] = fac[i-1]*i%p; 
  
    return (fac[n]* power(fac[r], p-2, p) % p * 
            power(fac[n-r], p-2, p) % p) % p; 
}
/////////////////////////////////////////////////////////***********END HERE **************////////////////////////////////////////////////////
long long power(long long x, long long y, long long p) 
{ 
    long long res = 1;  
    x = x % p;
    while (y > 0) 
    { 
        if (y & 1) 
            res = (res*x) % p;  
        y = y>>1;
        x = (x*x) % p;   
    } 
    return res; 
}
/////////////////////////////////////////////////////////***********END HERE **************////////////////////////////////////////////////////
void primeFactors(int n,vi &v)
{
    // Print the number of 2s that divide n
    while (n % 2 == 0)
    {
        // cout << 2 << " ";
        v.pb(2);
        n = n/2;
    }
 
    // n must be odd at this point. So we can skip
    // one element (Note i = i +2)
    for (int i = 3; i <= sqrt(n); i = i + 2)
    {
        // While i divides n, print i and divide n
        while (n % i == 0)
        {
            // cout << i << " ";
            v.pb(i);
            n = n/i;
        }
    }
 
    // This condition is to handle the case when n
    // is a prime number greater than 2
    if (n > 2)
        // cout << n << " ";
        v.pb(n);
}
/////////////////////////////////////////////////////////***********END HERE **************////////////////////////////////////////////////////
int sumPairs(vi &tmp, int c)
{
    // sorting the array
   sort(all(tmp));
     
    // Initialising the variable
    // to store the sum
    int sum = 0;
    // Iterating through each element
    // and adding it i times and
    // subtracting it (c-1-i) times
    for(int i = 0; i < c; i++){
        sum += i*tmp[i] - (c-1-i)*tmp[i];
    }
         
    return sum;
}
/////////////////////////////////////////////////////////***********END HERE **************////////////////////////////////////////////////////
float squareRoot(int number, int precision)
{
    int start = 0, end = number;
    int mid;
 
    // variable to store the answer
    float ans;
 
    // for computing integral part
    // of square root of number
    while (start <= end) {
        mid = (start + end) / 2;
        if (mid * mid == number) {
            ans = mid;
            break;
        }
 
        // incrementing start if integral
        // part lies on right side of the mid
        if (mid * mid < number) {
            start = mid + 1;
            ans = mid;
        }
 
        // decrementing end if integral part
        // lies on the left side of the mid
        else {
            end = mid - 1;
        }
    }
 
    // For computing the fractional part
    // of square root upto given precision
    float increment = 0.1;
    for (int i = 0; i < precision; i++) {
        while (ans * ans <= number) {
            ans += increment;
        }
 
        // loop terminates when ans * ans > number
        ans = ans - increment;
        increment = increment / 10;
    }
    return ans;
}
/////////////////////////////////////////////////////////***********END HERE **************////////////////////////////////////////////////////
struct cmp
{
    bool operator()(const pair<int ,int>& v1, const pair<int ,int>& v2) const
    { 
        return v1.second < v2.second; 
    }
};
/////////////////////////////////////////////////////////***********END HERE **************////////////////////////////////////////////////////
// program to find => [a&(a+1)&(a+2)&......(b)]
int func(int a , int b){
  int shiftcount = 0;
    //Iterate through every bit of a and b simultaneously
      //If a == b then we know that beyond that the and value will remain constant
      while(a != b and a > 0) {
          shiftcount++;
          a = a >> 1; 
          b = b >> 1;
    }
      return int64_t(a << shiftcount);
}

/////////////////////////////////////////////////////////***********END HERE **************////////////////////////////////////////////////////
// merge sort template
void merge(vector<int>& nums, int low, int mid, int high, int& reversePairsCount){
        int j = mid+1;
        for(int i=low; i<=mid; i++){
            while(j<=high && nums[i] > 2*(long long)nums[j]){
                j++;
            }
            reversePairsCount += j-(mid+1);
        }
        int size = high-low+1;
        vector<int> temp(size, 0);
        int left = low, right = mid+1, k=0;
        while(left<=mid && right<=high){
            if(nums[left] < nums[right]){
                temp[k++] = nums[left++];
            }
            else{
                temp[k++] = nums[right++];
            }
        }
        while(left<=mid){
            temp[k++] = nums[left++]; 
        }
        while(right<=high){
            temp[k++] = nums[right++]; 
        }
        int m=0;
        for(int i=low; i<=high; i++){
            nums[i] = temp[m++];
        }
    }

    void mergeSort(vector<int>& nums, int low, int high, int& reversePairsCount){
        if(low >= high){
            return;
        }
        int mid = (low + high) >> 1;
        mergeSort(nums, low, mid, reversePairsCount);
        mergeSort(nums, mid+1, high, reversePairsCount);
        merge(nums, low, mid, high, reversePairsCount);
    }
/////////////////////////////////////////////////////////***********END HERE **************////////////////////////////////////////////////////
vector<pair<int,int>>movement ={{1,0} ,{0,1} ,{-1 ,0} ,{0,-1} ,{1,1},{1,-1},{-1,1},{-1,-1}};
bool check(int a ,int b , int n , int m){
    return a>=0 && b>=0 && a<n && b<m;  
}
